
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000a9c  00000b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080008c  0080008c  00000b5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001da5  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b25  00000000  00000000  00002b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f7e  00000000  00000000  0000364a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  000045c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b3  00000000  00000000  000049ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016b9  00000000  00000000  0000515f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
   4:	0c 94 c2 04 	jmp	0x984	; 0x984 <__vector_1>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__vector_10>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  54:	20 02       	muls	r18, r16
  56:	25 02       	muls	r18, r21
  58:	2a 02       	muls	r18, r26
  5a:	2f 02       	muls	r18, r31
  5c:	34 02       	muls	r19, r20
  5e:	39 02       	muls	r19, r25
  60:	3e 02       	muls	r19, r30
  62:	4d 02       	muls	r20, r29
  64:	52 02       	muls	r21, r18
  66:	57 02       	muls	r21, r23
  68:	5c 02       	muls	r21, r28
  6a:	61 02       	muls	r22, r17
  6c:	66 02       	muls	r22, r22
  6e:	6b 02       	muls	r22, r27
  70:	7a 02       	muls	r23, r26
  72:	7f 02       	muls	r23, r31
  74:	84 02       	muls	r24, r20
  76:	89 02       	muls	r24, r25
  78:	8e 02       	muls	r24, r30
  7a:	93 02       	muls	r25, r19
  7c:	98 02       	muls	r25, r24
  7e:	a7 02       	muls	r26, r23
  80:	ab 02       	muls	r26, r27
  82:	af 02       	muls	r26, r31
  84:	b3 02       	muls	r27, r19
  86:	b7 02       	muls	r27, r23
  88:	bb 02       	muls	r27, r27
  8a:	bf 02       	muls	r27, r31
  8c:	ce 02       	muls	r28, r30
  8e:	e0 02       	muls	r30, r16
  90:	f2 02       	muls	r31, r18
  92:	04 03       	mulsu	r16, r20
  94:	16 03       	mulsu	r17, r22
  96:	28 03       	fmul	r18, r16
  98:	3a 03       	fmul	r19, r18

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf e5       	ldi	r28, 0x5F	; 95
  a0:	d8 e0       	ldi	r29, 0x08	; 8
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	10 e0       	ldi	r17, 0x00	; 0
  a8:	a0 e6       	ldi	r26, 0x60	; 96
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	ec e9       	ldi	r30, 0x9C	; 156
  ae:	fa e0       	ldi	r31, 0x0A	; 10
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <__do_copy_data+0x10>
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	ac 38       	cpi	r26, 0x8C	; 140
  b8:	b1 07       	cpc	r27, r17
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0xc>

000000bc <__do_clear_bss>:
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	ac e8       	ldi	r26, 0x8C	; 140
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	a6 39       	cpi	r26, 0x96	; 150
  c8:	b2 07       	cpc	r27, r18
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  d0:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <_exit>

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <main>:



int main(void)
{
	H_LedInit(R_LED);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 16 02 	call	0x42c	; 0x42c <H_LedInit>
	H_LedInit(G_LED);
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 16 02 	call	0x42c	; 0x42c <H_LedInit>
	H_LedInit(B_LED);
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	0e 94 16 02 	call	0x42c	; 0x42c <H_LedInit>
	H_LedInit(Motor_LED);
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	0e 94 16 02 	call	0x42c	; 0x42c <H_LedInit>
	H_LedInit(Right_LED);
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	0e 94 16 02 	call	0x42c	; 0x42c <H_LedInit>
	H_LedInit(Lift_LED);	
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	0e 94 16 02 	call	0x42c	; 0x42c <H_LedInit>
	H_LedInit(BAZER);
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	0e 94 16 02 	call	0x42c	; 0x42c <H_LedInit>
	H_LcdInit();
 102:	0e 94 b0 01 	call	0x360	; 0x360 <H_LcdInit>
	M_UartInit();
 106:	0e 94 38 05 	call	0xa70	; 0xa70 <M_UartInit>
	u8 Falg_control_Motor = 1 ;
	u8 Falg_control_Dirction_Right = 1 ;
	u8 Falg_control_Dirction_lift = 1 ;
	
	u8 Falg_control_LCD_State_FW =1 ;
	u8 Falg_control_LCD_State_BW =1 ;
 10a:	dd 24       	eor	r13, r13
 10c:	d3 94       	inc	r13
	
	u8 Falg_control_Motor = 1 ;
	u8 Falg_control_Dirction_Right = 1 ;
	u8 Falg_control_Dirction_lift = 1 ;
	
	u8 Falg_control_LCD_State_FW =1 ;
 10e:	cc 24       	eor	r12, r12
 110:	c3 94       	inc	r12

	u8 Falg_control_Blink_Led = 1 ;
	
	u8 Falg_control_Motor = 1 ;
	u8 Falg_control_Dirction_Right = 1 ;
	u8 Falg_control_Dirction_lift = 1 ;
 112:	ee 24       	eor	r14, r14
 114:	e3 94       	inc	r14
	M_UartInit();

	u8 Falg_control_Blink_Led = 1 ;
	
	u8 Falg_control_Motor = 1 ;
	u8 Falg_control_Dirction_Right = 1 ;
 116:	ff 24       	eor	r15, r15
 118:	f3 94       	inc	r15
	H_LcdInit();
	M_UartInit();

	u8 Falg_control_Blink_Led = 1 ;
	
	u8 Falg_control_Motor = 1 ;
 11a:	11 e0       	ldi	r17, 0x01	; 1
	H_LedInit(Lift_LED);	
	H_LedInit(BAZER);
	H_LcdInit();
	M_UartInit();

	u8 Falg_control_Blink_Led = 1 ;
 11c:	01 e0       	ldi	r16, 0x01	; 1
					

	while(1)
	{	
		
		Local_u8KeyPressed = M_UartRec();
 11e:	0e 94 42 05 	call	0xa84	; 0xa84 <M_UartRec>
 122:	c8 2f       	mov	r28, r24
 124:	d0 e0       	ldi	r29, 0x00	; 0
		H_LcdGoTo(0,1);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 01 02 	call	0x402	; 0x402 <H_LcdGoTo>
		H_LcdWriteString("STATE : Forward");
 12e:	80 e6       	ldi	r24, 0x60	; 96
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <H_LcdWriteString>
		H_LcdGoTo(1,1);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 01 02 	call	0x402	; 0x402 <H_LcdGoTo>
		H_LcdWriteString("CCS : OFF");		
 13e:	80 e7       	ldi	r24, 0x70	; 112
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <H_LcdWriteString>
		//H_LcdWriteCharacter(Local_u8KeyPressed);

		//******************************LEDS**************************//

		if (Local_u8KeyPressed == 'A') //Togel R_led
 146:	c1 34       	cpi	r28, 0x41	; 65
 148:	d1 05       	cpc	r29, r1
 14a:	21 f4       	brne	.+8      	; 0x154 <main+0x7c>
		{
			H_LedTog(R_LED);
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 9d 02 	call	0x53a	; 0x53a <H_LedTog>
 152:	18 c0       	rjmp	.+48     	; 0x184 <main+0xac>
		}

		
		if (Local_u8KeyPressed == 'B') //Togel Bazer
 154:	c2 34       	cpi	r28, 0x42	; 66
 156:	d1 05       	cpc	r29, r1
 158:	21 f4       	brne	.+8      	; 0x162 <main+0x8a>
		{
			H_LedTog(BAZER);
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	0e 94 9d 02 	call	0x53a	; 0x53a <H_LedTog>
 160:	22 c0       	rjmp	.+68     	; 0x1a6 <main+0xce>
		}		
		
		
		if (Local_u8KeyPressed == 'C') //control_Blink_Led
 162:	c3 34       	cpi	r28, 0x43	; 67
 164:	d1 05       	cpc	r29, r1
 166:	71 f4       	brne	.+28     	; 0x184 <main+0xac>
		{
			if (Falg_control_Blink_Led==1){H_LedBlink(G_LED);}
 168:	01 30       	cpi	r16, 0x01	; 1
 16a:	21 f4       	brne	.+8      	; 0x174 <main+0x9c>
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 c3 02 	call	0x586	; 0x586 <H_LedBlink>
 172:	05 c0       	rjmp	.+10     	; 0x17e <main+0xa6>
			if (Falg_control_Blink_Led==0){H_LedOff(G_LED);}	
 174:	01 11       	cpse	r16, r1
 176:	03 c0       	rjmp	.+6      	; 0x17e <main+0xa6>
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <H_LedOff>
			Falg_control_Blink_Led = Falg_control_Blink_Led ^= 1 ;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 27       	eor	r16, r24
 182:	26 c0       	rjmp	.+76     	; 0x1d0 <main+0xf8>
		}		
		
		//******************************LED_DIRICTION**************************//

		
		if (Local_u8KeyPressed == 'X') //control_Motor
 184:	c8 35       	cpi	r28, 0x58	; 88
 186:	d1 05       	cpc	r29, r1
 188:	71 f4       	brne	.+28     	; 0x1a6 <main+0xce>
		{
			if (Falg_control_Motor==1)
 18a:	11 30       	cpi	r17, 0x01	; 1
 18c:	21 f4       	brne	.+8      	; 0x196 <main+0xbe>
			{
				H_LedOn(Motor_LED);
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	0e 94 43 02 	call	0x486	; 0x486 <H_LedOn>
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <main+0xc8>
			}
			if (Falg_control_Motor==0)
 196:	11 11       	cpse	r17, r1
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <main+0xc8>
			{
				H_LedOff(Motor_LED);
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <H_LedOff>
			}			
			Falg_control_Motor = Falg_control_Motor ^= 1 ;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	18 27       	eor	r17, r24
 1a4:	2a c0       	rjmp	.+84     	; 0x1fa <main+0x122>
		}	
		
		
		if (Local_u8KeyPressed == 'R') //control_Dirction_Right
 1a6:	c2 35       	cpi	r28, 0x52	; 82
 1a8:	d1 05       	cpc	r29, r1
 1aa:	91 f4       	brne	.+36     	; 0x1d0 <main+0xf8>
		{
			if (Falg_control_Dirction_Right==1)
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	f8 12       	cpse	r15, r24
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <main+0xe8>
			{
				H_LedOn(Right_LED);
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	0e 94 43 02 	call	0x486	; 0x486 <H_LedOn>
				H_LedOff(Lift_LED);
 1b8:	87 e0       	ldi	r24, 0x07	; 7
 1ba:	0e 94 70 02 	call	0x4e0	; 0x4e0 <H_LedOff>
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <main+0xf2>
			}
			if (Falg_control_Dirction_Right==0)
 1c0:	f1 10       	cpse	r15, r1
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <main+0xf2>
			{
				H_LedOff(Right_LED);
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <H_LedOff>
			}			
			Falg_control_Dirction_Right = Falg_control_Dirction_Right ^= 1 ;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	f8 26       	eor	r15, r24
 1ce:	2b c0       	rjmp	.+86     	; 0x226 <main+0x14e>
		}			
		
		
		if (Local_u8KeyPressed == 'L') //control_Dirction_lift
 1d0:	cc 34       	cpi	r28, 0x4C	; 76
 1d2:	d1 05       	cpc	r29, r1
 1d4:	91 f4       	brne	.+36     	; 0x1fa <main+0x122>
		{
			if (Falg_control_Dirction_lift==1)
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	e8 12       	cpse	r14, r24
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <main+0x112>
			{
				H_LedOn(Lift_LED);
 1dc:	87 e0       	ldi	r24, 0x07	; 7
 1de:	0e 94 43 02 	call	0x486	; 0x486 <H_LedOn>
				H_LedOff(Right_LED);
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <H_LedOff>
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <main+0x11c>
			}
			if (Falg_control_Dirction_lift==0)
 1ea:	e1 10       	cpse	r14, r1
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <main+0x11c>
			{
				H_LedOff(Lift_LED);
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <H_LedOff>
			}			
			Falg_control_Dirction_lift = Falg_control_Dirction_lift ^= 1 ;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	e8 26       	eor	r14, r24
 1f8:	92 cf       	rjmp	.-220    	; 0x11e <main+0x46>
		
		
		//******************************LCD**************************//
		
		
		if (Local_u8KeyPressed == 'D') //control_LCD_State_FW 
 1fa:	c4 34       	cpi	r28, 0x44	; 68
 1fc:	d1 05       	cpc	r29, r1
 1fe:	99 f4       	brne	.+38     	; 0x226 <main+0x14e>
		{
			H_LcdGoTo(0,9);
 200:	69 e0       	ldi	r22, 0x09	; 9
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 01 02 	call	0x402	; 0x402 <H_LcdGoTo>
			H_LcdWriteString("Forward ");
 208:	8a e7       	ldi	r24, 0x7A	; 122
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <H_LcdWriteString>
			if (Falg_control_LCD_State_FW==1)
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	c8 12       	cpse	r12, r24
 214:	05 c0       	rjmp	.+10     	; 0x220 <main+0x148>
			{
				H_LedOff(Motor_LED);
 216:	85 e0       	ldi	r24, 0x05	; 5
 218:	0e 94 70 02 	call	0x4e0	; 0x4e0 <H_LedOff>
				Falg_control_Motor = Falg_control_Motor ^= 1 ;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	18 27       	eor	r17, r24
			}
			Falg_control_LCD_State_FW = Falg_control_LCD_State_FW ^= 1 ;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	c8 26       	eor	r12, r24
 224:	7c cf       	rjmp	.-264    	; 0x11e <main+0x46>
		}			
		
		
		
		if (Local_u8KeyPressed == 'W') //control_LCD_State_BW
 226:	c7 35       	cpi	r28, 0x57	; 87
 228:	d1 05       	cpc	r29, r1
 22a:	09 f0       	breq	.+2      	; 0x22e <main+0x156>
 22c:	78 cf       	rjmp	.-272    	; 0x11e <main+0x46>
		{
			H_LcdGoTo(0,9);
 22e:	69 e0       	ldi	r22, 0x09	; 9
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 01 02 	call	0x402	; 0x402 <H_LcdGoTo>
			H_LcdWriteString("Backward");
 236:	83 e8       	ldi	r24, 0x83	; 131
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <H_LcdWriteString>
			if (Falg_control_LCD_State_BW==1)
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	d8 12       	cpse	r13, r24
 242:	05 c0       	rjmp	.+10     	; 0x24e <main+0x176>
			{
				H_LedOff(Motor_LED);
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	0e 94 70 02 	call	0x4e0	; 0x4e0 <H_LedOff>
				Falg_control_Motor = Falg_control_Motor ^= 1 ;				
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	18 27       	eor	r17, r24
			}	
			Falg_control_LCD_State_BW = Falg_control_LCD_State_BW ^= 1 ;	
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	d8 26       	eor	r13, r24
 252:	65 cf       	rjmp	.-310    	; 0x11e <main+0x46>

00000254 <H_LcdWriteCharacter>:
	}
}

void H_LcdClear(void)
{
	H_LcdWriteCommand(0x01);
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	8b e0       	ldi	r24, 0x0B	; 11
 25c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	86 e1       	ldi	r24, 0x16	; 22
 264:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 268:	8b b3       	in	r24, 0x1b	; 27
 26a:	9c 2f       	mov	r25, r28
 26c:	96 95       	lsr	r25
 26e:	98 77       	andi	r25, 0x78	; 120
 270:	87 78       	andi	r24, 0x87	; 135
 272:	89 2b       	or	r24, r25
 274:	8b bb       	out	0x1b, r24	; 27
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	8c e0       	ldi	r24, 0x0C	; 12
 27a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 27e:	8f e9       	ldi	r24, 0x9F	; 159
 280:	9f e0       	ldi	r25, 0x0F	; 15
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <H_LcdWriteCharacter+0x2e>
 286:	00 c0       	rjmp	.+0      	; 0x288 <H_LcdWriteCharacter+0x34>
 288:	00 00       	nop
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	8c e0       	ldi	r24, 0x0C	; 12
 28e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 292:	8f e1       	ldi	r24, 0x1F	; 31
 294:	9e e4       	ldi	r25, 0x4E	; 78
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <H_LcdWriteCharacter+0x42>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <H_LcdWriteCharacter+0x48>
 29c:	00 00       	nop
 29e:	8b b3       	in	r24, 0x1b	; 27
 2a0:	cc 0f       	add	r28, r28
 2a2:	cc 0f       	add	r28, r28
 2a4:	cc 0f       	add	r28, r28
 2a6:	c8 77       	andi	r28, 0x78	; 120
 2a8:	87 78       	andi	r24, 0x87	; 135
 2aa:	c8 2b       	or	r28, r24
 2ac:	cb bb       	out	0x1b, r28	; 27
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	8c e0       	ldi	r24, 0x0C	; 12
 2b2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 2b6:	8f e9       	ldi	r24, 0x9F	; 159
 2b8:	9f e0       	ldi	r25, 0x0F	; 15
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <H_LcdWriteCharacter+0x66>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <H_LcdWriteCharacter+0x6c>
 2c0:	00 00       	nop
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	8c e0       	ldi	r24, 0x0C	; 12
 2c6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 2ca:	8f e1       	ldi	r24, 0x1F	; 31
 2cc:	9e e4       	ldi	r25, 0x4E	; 78
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <H_LcdWriteCharacter+0x7a>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <H_LcdWriteCharacter+0x80>
 2d4:	00 00       	nop
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <H_LcdWriteCommand>:
 2da:	cf 93       	push	r28
 2dc:	c8 2f       	mov	r28, r24
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	8b e0       	ldi	r24, 0x0B	; 11
 2e2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	86 e1       	ldi	r24, 0x16	; 22
 2ea:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 2ee:	8b b3       	in	r24, 0x1b	; 27
 2f0:	9c 2f       	mov	r25, r28
 2f2:	96 95       	lsr	r25
 2f4:	98 77       	andi	r25, 0x78	; 120
 2f6:	87 78       	andi	r24, 0x87	; 135
 2f8:	89 2b       	or	r24, r25
 2fa:	8b bb       	out	0x1b, r24	; 27
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <H_LcdWriteCommand+0x2e>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <H_LcdWriteCommand+0x34>
 30e:	00 00       	nop
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	8c e0       	ldi	r24, 0x0C	; 12
 314:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 318:	8f e1       	ldi	r24, 0x1F	; 31
 31a:	9e e4       	ldi	r25, 0x4E	; 78
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <H_LcdWriteCommand+0x42>
 320:	00 c0       	rjmp	.+0      	; 0x322 <H_LcdWriteCommand+0x48>
 322:	00 00       	nop
 324:	8b b3       	in	r24, 0x1b	; 27
 326:	cc 0f       	add	r28, r28
 328:	cc 0f       	add	r28, r28
 32a:	cc 0f       	add	r28, r28
 32c:	c8 77       	andi	r28, 0x78	; 120
 32e:	87 78       	andi	r24, 0x87	; 135
 330:	c8 2b       	or	r28, r24
 332:	cb bb       	out	0x1b, r28	; 27
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 33c:	8f e9       	ldi	r24, 0x9F	; 159
 33e:	9f e0       	ldi	r25, 0x0F	; 15
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <H_LcdWriteCommand+0x66>
 344:	00 c0       	rjmp	.+0      	; 0x346 <H_LcdWriteCommand+0x6c>
 346:	00 00       	nop
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 350:	8f e1       	ldi	r24, 0x1F	; 31
 352:	9e e4       	ldi	r25, 0x4E	; 78
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <H_LcdWriteCommand+0x7a>
 358:	00 c0       	rjmp	.+0      	; 0x35a <H_LcdWriteCommand+0x80>
 35a:	00 00       	nop
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <H_LcdInit>:
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	8b e0       	ldi	r24, 0x0B	; 11
 364:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	86 e1       	ldi	r24, 0x16	; 22
 374:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	8d e0       	ldi	r24, 0x0D	; 13
 37c:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	8e e0       	ldi	r24, 0x0E	; 14
 384:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	8f e0       	ldi	r24, 0x0F	; 15
 38c:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	80 e1       	ldi	r24, 0x10	; 16
 394:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	89 e6       	ldi	r24, 0x69	; 105
 39c:	98 e1       	ldi	r25, 0x18	; 24
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <H_LcdInit+0x3e>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <H_LcdInit+0x48>
 3a8:	00 00       	nop
 3aa:	83 e3       	ldi	r24, 0x33	; 51
 3ac:	0e 94 6d 01 	call	0x2da	; 0x2da <H_LcdWriteCommand>
 3b0:	82 e3       	ldi	r24, 0x32	; 50
 3b2:	0e 94 6d 01 	call	0x2da	; 0x2da <H_LcdWriteCommand>
 3b6:	88 e2       	ldi	r24, 0x28	; 40
 3b8:	0e 94 6d 01 	call	0x2da	; 0x2da <H_LcdWriteCommand>
 3bc:	8c e0       	ldi	r24, 0x0C	; 12
 3be:	0e 94 6d 01 	call	0x2da	; 0x2da <H_LcdWriteCommand>
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	0e 94 6d 01 	call	0x2da	; 0x2da <H_LcdWriteCommand>
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	0e 94 6d 01 	call	0x2da	; 0x2da <H_LcdWriteCommand>
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 6d 01 	call	0x2da	; 0x2da <H_LcdWriteCommand>
 3d4:	08 95       	ret

000003d6 <H_LcdWriteString>:
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	fc 01       	movw	r30, r24
 3de:	80 81       	ld	r24, Z
 3e0:	88 23       	and	r24, r24
 3e2:	59 f0       	breq	.+22     	; 0x3fa <H_LcdWriteString+0x24>
 3e4:	8f 01       	movw	r16, r30
 3e6:	c0 e0       	ldi	r28, 0x00	; 0
 3e8:	0e 94 2a 01 	call	0x254	; 0x254 <H_LcdWriteCharacter>
 3ec:	cf 5f       	subi	r28, 0xFF	; 255
 3ee:	f8 01       	movw	r30, r16
 3f0:	ec 0f       	add	r30, r28
 3f2:	f1 1d       	adc	r31, r1
 3f4:	80 81       	ld	r24, Z
 3f6:	81 11       	cpse	r24, r1
 3f8:	f7 cf       	rjmp	.-18     	; 0x3e8 <H_LcdWriteString+0x12>
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	08 95       	ret

00000402 <H_LcdGoTo>:
}

void H_LcdGoTo(u8 u8_local_row,u8 u8_local_col)
{
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	00 d0       	rcall	.+0      	; 0x408 <H_LcdGoTo+0x6>
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
	u8 arr[2] = {0x80,0xC0};
 40c:	90 e8       	ldi	r25, 0x80	; 128
 40e:	99 83       	std	Y+1, r25	; 0x01
 410:	90 ec       	ldi	r25, 0xC0	; 192
 412:	9a 83       	std	Y+2, r25	; 0x02
	H_LcdWriteCommand(arr[u8_local_row]+u8_local_col);  
 414:	fe 01       	movw	r30, r28
 416:	e8 0f       	add	r30, r24
 418:	f1 1d       	adc	r31, r1
 41a:	81 81       	ldd	r24, Z+1	; 0x01
 41c:	86 0f       	add	r24, r22
 41e:	0e 94 6d 01 	call	0x2da	; 0x2da <H_LcdWriteCommand>
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <H_LedInit>:
#include "DIO.h"
# define F_CPU 16000000UL
#include <util/delay.h>
void H_LedInit(u8 u8_led)
{
	switch(u8_led)
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	fc 01       	movw	r30, r24
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	e7 30       	cpi	r30, 0x07	; 7
 434:	f1 05       	cpc	r31, r1
 436:	30 f5       	brcc	.+76     	; 0x484 <H_LedInit+0x58>
 438:	e6 5d       	subi	r30, 0xD6	; 214
 43a:	ff 4f       	sbci	r31, 0xFF	; 255
 43c:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__tablejump2__>
	{
		case R_LED:
		M_PinMode(R_LED_PIN,OUTPUT);
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	8e e1       	ldi	r24, 0x1E	; 30
 444:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
		break;
 448:	08 95       	ret
		case G_LED:
		M_PinMode(G_LED_PIN,OUTPUT);
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	8f e1       	ldi	r24, 0x1F	; 31
 44e:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
		break;
 452:	08 95       	ret
		case B_LED:
		M_PinMode(B_LED_PIN,OUTPUT);
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	80 e2       	ldi	r24, 0x20	; 32
 458:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
		break;
 45c:	08 95       	ret
		case BAZER:
		M_PinMode(B_LED_PIN,OUTPUT);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	80 e2       	ldi	r24, 0x20	; 32
 462:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
		break;		
 466:	08 95       	ret
		case Motor_LED:
		M_PinMode(Motor_LED_PIN,OUTPUT);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	82 e2       	ldi	r24, 0x22	; 34
 46c:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
		break;
 470:	08 95       	ret
		case Right_LED:
		M_PinMode(Right_LED_PIN,OUTPUT);
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	83 e2       	ldi	r24, 0x23	; 35
 476:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
		break;
 47a:	08 95       	ret
		case Lift_LED:
		M_PinMode(Lift_LED_PIN,OUTPUT);
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	84 e2       	ldi	r24, 0x24	; 36
 480:	0e 94 4c 03 	call	0x698	; 0x698 <M_PinMode>
 484:	08 95       	ret

00000486 <H_LedOn>:
		break;
	}
}
void H_LedOn(u8 u8_led)
{
	switch(u8_led)
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	e7 30       	cpi	r30, 0x07	; 7
 48e:	f1 05       	cpc	r31, r1
 490:	30 f5       	brcc	.+76     	; 0x4de <H_LedOn+0x58>
 492:	ef 5c       	subi	r30, 0xCF	; 207
 494:	ff 4f       	sbci	r31, 0xFF	; 255
 496:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__tablejump2__>
	{
		case R_LED:
		M_PinWrite(R_LED_PIN,HIGH);
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	8e e1       	ldi	r24, 0x1E	; 30
 49e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 4a2:	08 95       	ret
		case G_LED:
		M_PinWrite(G_LED_PIN,HIGH);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	8f e1       	ldi	r24, 0x1F	; 31
 4a8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 4ac:	08 95       	ret
		case B_LED:
		M_PinWrite(B_LED_PIN,HIGH);
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	80 e2       	ldi	r24, 0x20	; 32
 4b2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 4b6:	08 95       	ret
		case BAZER:
		M_PinWrite(BAZER_PIN,HIGH);
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	81 e2       	ldi	r24, 0x21	; 33
 4bc:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 4c0:	08 95       	ret
		case Motor_LED:
		M_PinWrite(Motor_LED_PIN,HIGH);
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	82 e2       	ldi	r24, 0x22	; 34
 4c6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 4ca:	08 95       	ret
		case Right_LED:
		M_PinWrite(Right_LED_PIN,HIGH);
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	83 e2       	ldi	r24, 0x23	; 35
 4d0:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 4d4:	08 95       	ret
		case Lift_LED:
		M_PinWrite(Lift_LED_PIN,HIGH);
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	84 e2       	ldi	r24, 0x24	; 36
 4da:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 4de:	08 95       	ret

000004e0 <H_LedOff>:
		break;
	}
}
void H_LedOff(u8 u8_led)
{
	switch(u8_led)
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	fc 01       	movw	r30, r24
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	e7 30       	cpi	r30, 0x07	; 7
 4e8:	f1 05       	cpc	r31, r1
 4ea:	30 f5       	brcc	.+76     	; 0x538 <H_LedOff+0x58>
 4ec:	e8 5c       	subi	r30, 0xC8	; 200
 4ee:	ff 4f       	sbci	r31, 0xFF	; 255
 4f0:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__tablejump2__>
	{
		case R_LED:
		M_PinWrite(R_LED_PIN,LOW);
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	8e e1       	ldi	r24, 0x1E	; 30
 4f8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 4fc:	08 95       	ret
		case G_LED:
		M_PinWrite(G_LED_PIN,LOW);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	8f e1       	ldi	r24, 0x1F	; 31
 502:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 506:	08 95       	ret
		case B_LED:
		M_PinWrite(B_LED_PIN,LOW);
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	80 e2       	ldi	r24, 0x20	; 32
 50c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 510:	08 95       	ret
		case BAZER:
		M_PinWrite(BAZER_PIN,LOW);
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	81 e2       	ldi	r24, 0x21	; 33
 516:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 51a:	08 95       	ret
		case Motor_LED:
		M_PinWrite(Motor_LED_PIN,LOW);
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	82 e2       	ldi	r24, 0x22	; 34
 520:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 524:	08 95       	ret
		case Right_LED:
		M_PinWrite(Right_LED_PIN,LOW);
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	83 e2       	ldi	r24, 0x23	; 35
 52a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 52e:	08 95       	ret
		case Lift_LED:
		M_PinWrite(Lift_LED_PIN,LOW);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	84 e2       	ldi	r24, 0x24	; 36
 534:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 538:	08 95       	ret

0000053a <H_LedTog>:
		break;
	}
}
void H_LedTog(u8 u8_led)
{
	switch(u8_led)
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	fc 01       	movw	r30, r24
 53e:	31 97       	sbiw	r30, 0x01	; 1
 540:	e7 30       	cpi	r30, 0x07	; 7
 542:	f1 05       	cpc	r31, r1
 544:	f8 f4       	brcc	.+62     	; 0x584 <H_LedTog+0x4a>
 546:	e1 5c       	subi	r30, 0xC1	; 193
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__tablejump2__>
	{
		case R_LED:
		M_PinTog(R_LED_PIN);
 54e:	8e e1       	ldi	r24, 0x1E	; 30
 550:	0e 94 78 04 	call	0x8f0	; 0x8f0 <M_PinTog>
		break;
 554:	08 95       	ret
		case G_LED:
		M_PinTog(G_LED_PIN);
 556:	8f e1       	ldi	r24, 0x1F	; 31
 558:	0e 94 78 04 	call	0x8f0	; 0x8f0 <M_PinTog>
		break;
 55c:	08 95       	ret
		case B_LED:
		M_PinTog(B_LED_PIN);
 55e:	80 e2       	ldi	r24, 0x20	; 32
 560:	0e 94 78 04 	call	0x8f0	; 0x8f0 <M_PinTog>
		break;
 564:	08 95       	ret
		case BAZER:
		M_PinTog(BAZER_PIN);
 566:	81 e2       	ldi	r24, 0x21	; 33
 568:	0e 94 78 04 	call	0x8f0	; 0x8f0 <M_PinTog>
		break;	
 56c:	08 95       	ret
		case Motor_LED:
		M_PinTog(Motor_LED_PIN);
 56e:	82 e2       	ldi	r24, 0x22	; 34
 570:	0e 94 78 04 	call	0x8f0	; 0x8f0 <M_PinTog>
		break;
 574:	08 95       	ret
		case Right_LED:
		M_PinTog(Right_LED_PIN);
 576:	83 e2       	ldi	r24, 0x23	; 35
 578:	0e 94 78 04 	call	0x8f0	; 0x8f0 <M_PinTog>
		break;
 57c:	08 95       	ret
		case Lift_LED:
		M_PinTog(Lift_LED_PIN);
 57e:	84 e2       	ldi	r24, 0x24	; 36
 580:	0e 94 78 04 	call	0x8f0	; 0x8f0 <M_PinTog>
 584:	08 95       	ret

00000586 <H_LedBlink>:
		break;
	}
}
void H_LedBlink(u8 u8_led)
{
	switch(u8_led)
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	fc 01       	movw	r30, r24
 58a:	31 97       	sbiw	r30, 0x01	; 1
 58c:	e7 30       	cpi	r30, 0x07	; 7
 58e:	f1 05       	cpc	r31, r1
 590:	08 f0       	brcs	.+2      	; 0x594 <H_LedBlink+0xe>
 592:	81 c0       	rjmp	.+258    	; 0x696 <H_LedBlink+0x110>
 594:	ea 5b       	subi	r30, 0xBA	; 186
 596:	ff 4f       	sbci	r31, 0xFF	; 255
 598:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__tablejump2__>
	{
		case R_LED:
		M_PinWrite(R_LED_PIN,HIGH);
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	8e e1       	ldi	r24, 0x1E	; 30
 5a0:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	80 e7       	ldi	r24, 0x70	; 112
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	90 40       	sbci	r25, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <H_LedBlink+0x24>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <H_LedBlink+0x2e>
 5b4:	00 00       	nop
		_delay_ms(50);
		M_PinWrite(R_LED_PIN,LOW);
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	8e e1       	ldi	r24, 0x1E	; 30
 5ba:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 5be:	08 95       	ret
		case G_LED:
		M_PinWrite(G_LED_PIN,HIGH);
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	8f e1       	ldi	r24, 0x1F	; 31
 5c4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 5c8:	2f ef       	ldi	r18, 0xFF	; 255
 5ca:	89 e6       	ldi	r24, 0x69	; 105
 5cc:	98 e1       	ldi	r25, 0x18	; 24
 5ce:	21 50       	subi	r18, 0x01	; 1
 5d0:	80 40       	sbci	r24, 0x00	; 0
 5d2:	90 40       	sbci	r25, 0x00	; 0
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <H_LedBlink+0x48>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <H_LedBlink+0x52>
 5d8:	00 00       	nop
		_delay_ms(500);
		M_PinWrite(G_LED_PIN,LOW);
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	8f e1       	ldi	r24, 0x1F	; 31
 5de:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 5e2:	08 95       	ret
		case B_LED:
		M_PinWrite(B_LED_PIN,HIGH);
 5e4:	61 e0       	ldi	r22, 0x01	; 1
 5e6:	80 e2       	ldi	r24, 0x20	; 32
 5e8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 5ec:	2f ef       	ldi	r18, 0xFF	; 255
 5ee:	80 e7       	ldi	r24, 0x70	; 112
 5f0:	92 e0       	ldi	r25, 0x02	; 2
 5f2:	21 50       	subi	r18, 0x01	; 1
 5f4:	80 40       	sbci	r24, 0x00	; 0
 5f6:	90 40       	sbci	r25, 0x00	; 0
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <H_LedBlink+0x6c>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <H_LedBlink+0x76>
 5fc:	00 00       	nop
		_delay_ms(50);
		M_PinWrite(B_LED_PIN,LOW);
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	80 e2       	ldi	r24, 0x20	; 32
 602:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 606:	08 95       	ret
		case BAZER:
		M_PinWrite(BAZER_PIN,HIGH);
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	81 e2       	ldi	r24, 0x21	; 33
 60c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 610:	2f ef       	ldi	r18, 0xFF	; 255
 612:	80 e7       	ldi	r24, 0x70	; 112
 614:	92 e0       	ldi	r25, 0x02	; 2
 616:	21 50       	subi	r18, 0x01	; 1
 618:	80 40       	sbci	r24, 0x00	; 0
 61a:	90 40       	sbci	r25, 0x00	; 0
 61c:	e1 f7       	brne	.-8      	; 0x616 <H_LedBlink+0x90>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <H_LedBlink+0x9a>
 620:	00 00       	nop
		_delay_ms(50);
		M_PinWrite(BAZER_PIN,LOW);
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	81 e2       	ldi	r24, 0x21	; 33
 626:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 62a:	08 95       	ret
		case Motor_LED:
		M_PinWrite(Motor_LED_PIN,HIGH);
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	82 e2       	ldi	r24, 0x22	; 34
 630:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 634:	2f ef       	ldi	r18, 0xFF	; 255
 636:	80 e7       	ldi	r24, 0x70	; 112
 638:	92 e0       	ldi	r25, 0x02	; 2
 63a:	21 50       	subi	r18, 0x01	; 1
 63c:	80 40       	sbci	r24, 0x00	; 0
 63e:	90 40       	sbci	r25, 0x00	; 0
 640:	e1 f7       	brne	.-8      	; 0x63a <H_LedBlink+0xb4>
 642:	00 c0       	rjmp	.+0      	; 0x644 <H_LedBlink+0xbe>
 644:	00 00       	nop
				_delay_ms(50);
		M_PinWrite(Motor_LED_PIN,LOW);											
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	82 e2       	ldi	r24, 0x22	; 34
 64a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 64e:	08 95       	ret
		case Right_LED:
		M_PinWrite(Right_LED_PIN,HIGH);
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	83 e2       	ldi	r24, 0x23	; 35
 654:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 658:	2f ef       	ldi	r18, 0xFF	; 255
 65a:	80 e7       	ldi	r24, 0x70	; 112
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	21 50       	subi	r18, 0x01	; 1
 660:	80 40       	sbci	r24, 0x00	; 0
 662:	90 40       	sbci	r25, 0x00	; 0
 664:	e1 f7       	brne	.-8      	; 0x65e <H_LedBlink+0xd8>
 666:	00 c0       	rjmp	.+0      	; 0x668 <H_LedBlink+0xe2>
 668:	00 00       	nop
				_delay_ms(50);
		M_PinWrite(Right_LED_PIN,LOW);
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	83 e2       	ldi	r24, 0x23	; 35
 66e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
		break;
 672:	08 95       	ret
		case Lift_LED:
		M_PinWrite(Lift_LED_PIN,HIGH);
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	84 e2       	ldi	r24, 0x24	; 36
 678:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 67c:	2f ef       	ldi	r18, 0xFF	; 255
 67e:	80 e7       	ldi	r24, 0x70	; 112
 680:	92 e0       	ldi	r25, 0x02	; 2
 682:	21 50       	subi	r18, 0x01	; 1
 684:	80 40       	sbci	r24, 0x00	; 0
 686:	90 40       	sbci	r25, 0x00	; 0
 688:	e1 f7       	brne	.-8      	; 0x682 <H_LedBlink+0xfc>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <H_LedBlink+0x106>
 68c:	00 00       	nop
				_delay_ms(50);
		M_PinWrite(Lift_LED_PIN,LOW);		
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	84 e2       	ldi	r24, 0x24	; 36
 692:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_PinWrite>
 696:	08 95       	ret

00000698 <M_PinMode>:
#include "BIT_MATH.h"
#include "DIO.h"

void M_PinMode(u8 x,u8 state)
{
	u8 port = x / 10;    
 698:	9d ec       	ldi	r25, 0xCD	; 205
 69a:	89 9f       	mul	r24, r25
 69c:	91 2d       	mov	r25, r1
 69e:	11 24       	eor	r1, r1
 6a0:	96 95       	lsr	r25
 6a2:	96 95       	lsr	r25
 6a4:	96 95       	lsr	r25
	u8 pin  = x % 10;    
 6a6:	39 2f       	mov	r19, r25
 6a8:	33 0f       	add	r19, r19
 6aa:	23 2f       	mov	r18, r19
 6ac:	22 0f       	add	r18, r18
 6ae:	22 0f       	add	r18, r18
 6b0:	23 0f       	add	r18, r19
 6b2:	82 1b       	sub	r24, r18
	switch(state)
 6b4:	66 23       	and	r22, r22
 6b6:	21 f0       	breq	.+8      	; 0x6c0 <M_PinMode+0x28>
 6b8:	61 30       	cpi	r22, 0x01	; 1
 6ba:	09 f4       	brne	.+2      	; 0x6be <M_PinMode+0x26>
 6bc:	44 c0       	rjmp	.+136    	; 0x746 <M_PinMode+0xae>
 6be:	08 95       	ret
	{
		case INPUT:
		switch(port)
 6c0:	92 30       	cpi	r25, 0x02	; 2
 6c2:	b9 f0       	breq	.+46     	; 0x6f2 <M_PinMode+0x5a>
 6c4:	18 f4       	brcc	.+6      	; 0x6cc <M_PinMode+0x34>
 6c6:	91 30       	cpi	r25, 0x01	; 1
 6c8:	31 f0       	breq	.+12     	; 0x6d6 <M_PinMode+0x3e>
 6ca:	08 95       	ret
 6cc:	93 30       	cpi	r25, 0x03	; 3
 6ce:	f9 f0       	breq	.+62     	; 0x70e <M_PinMode+0x76>
 6d0:	94 30       	cpi	r25, 0x04	; 4
 6d2:	59 f1       	breq	.+86     	; 0x72a <M_PinMode+0x92>
 6d4:	08 95       	ret
		{
			case GROUP_A:
			CLR_BIT(DDRA,pin);
 6d6:	4a b3       	in	r20, 0x1a	; 26
 6d8:	21 e0       	ldi	r18, 0x01	; 1
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	b9 01       	movw	r22, r18
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <M_PinMode+0x4c>
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	8a 95       	dec	r24
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <M_PinMode+0x48>
 6e8:	cb 01       	movw	r24, r22
 6ea:	80 95       	com	r24
 6ec:	84 23       	and	r24, r20
 6ee:	8a bb       	out	0x1a, r24	; 26
			break;
 6f0:	08 95       	ret
			case GROUP_B:
			CLR_BIT(DDRB,pin);
 6f2:	47 b3       	in	r20, 0x17	; 23
 6f4:	21 e0       	ldi	r18, 0x01	; 1
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	b9 01       	movw	r22, r18
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <M_PinMode+0x68>
 6fc:	66 0f       	add	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	8a 95       	dec	r24
 702:	e2 f7       	brpl	.-8      	; 0x6fc <M_PinMode+0x64>
 704:	cb 01       	movw	r24, r22
 706:	80 95       	com	r24
 708:	84 23       	and	r24, r20
 70a:	87 bb       	out	0x17, r24	; 23
			break;
 70c:	08 95       	ret
			case GROUP_C:
			CLR_BIT(DDRC,pin);
 70e:	44 b3       	in	r20, 0x14	; 20
 710:	21 e0       	ldi	r18, 0x01	; 1
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	b9 01       	movw	r22, r18
 716:	02 c0       	rjmp	.+4      	; 0x71c <M_PinMode+0x84>
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	8a 95       	dec	r24
 71e:	e2 f7       	brpl	.-8      	; 0x718 <M_PinMode+0x80>
 720:	cb 01       	movw	r24, r22
 722:	80 95       	com	r24
 724:	84 23       	and	r24, r20
 726:	84 bb       	out	0x14, r24	; 20
			break;
 728:	08 95       	ret
			case GROUP_D:
			CLR_BIT(DDRD,pin);
 72a:	41 b3       	in	r20, 0x11	; 17
 72c:	21 e0       	ldi	r18, 0x01	; 1
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	b9 01       	movw	r22, r18
 732:	02 c0       	rjmp	.+4      	; 0x738 <M_PinMode+0xa0>
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	8a 95       	dec	r24
 73a:	e2 f7       	brpl	.-8      	; 0x734 <M_PinMode+0x9c>
 73c:	cb 01       	movw	r24, r22
 73e:	80 95       	com	r24
 740:	84 23       	and	r24, r20
 742:	81 bb       	out	0x11, r24	; 17
			break;
 744:	08 95       	ret
			default:
			break;
		}
		break;
		case OUTPUT:
		switch(port)
 746:	92 30       	cpi	r25, 0x02	; 2
 748:	b1 f0       	breq	.+44     	; 0x776 <M_PinMode+0xde>
 74a:	18 f4       	brcc	.+6      	; 0x752 <M_PinMode+0xba>
 74c:	91 30       	cpi	r25, 0x01	; 1
 74e:	31 f0       	breq	.+12     	; 0x75c <M_PinMode+0xc4>
 750:	08 95       	ret
 752:	93 30       	cpi	r25, 0x03	; 3
 754:	e9 f0       	breq	.+58     	; 0x790 <M_PinMode+0xf8>
 756:	94 30       	cpi	r25, 0x04	; 4
 758:	41 f1       	breq	.+80     	; 0x7aa <M_PinMode+0x112>
 75a:	08 95       	ret
		{
			case GROUP_A:
			SET_BIT(DDRA,pin);
 75c:	4a b3       	in	r20, 0x1a	; 26
 75e:	21 e0       	ldi	r18, 0x01	; 1
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	b9 01       	movw	r22, r18
 764:	02 c0       	rjmp	.+4      	; 0x76a <M_PinMode+0xd2>
 766:	66 0f       	add	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	8a 95       	dec	r24
 76c:	e2 f7       	brpl	.-8      	; 0x766 <M_PinMode+0xce>
 76e:	cb 01       	movw	r24, r22
 770:	84 2b       	or	r24, r20
 772:	8a bb       	out	0x1a, r24	; 26
			break;
 774:	08 95       	ret
			case GROUP_B:
			SET_BIT(DDRB,pin);
 776:	47 b3       	in	r20, 0x17	; 23
 778:	21 e0       	ldi	r18, 0x01	; 1
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	b9 01       	movw	r22, r18
 77e:	02 c0       	rjmp	.+4      	; 0x784 <M_PinMode+0xec>
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	8a 95       	dec	r24
 786:	e2 f7       	brpl	.-8      	; 0x780 <M_PinMode+0xe8>
 788:	cb 01       	movw	r24, r22
 78a:	84 2b       	or	r24, r20
 78c:	87 bb       	out	0x17, r24	; 23
			break;
 78e:	08 95       	ret
			case GROUP_C:
			SET_BIT(DDRC,pin);
 790:	44 b3       	in	r20, 0x14	; 20
 792:	21 e0       	ldi	r18, 0x01	; 1
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	b9 01       	movw	r22, r18
 798:	02 c0       	rjmp	.+4      	; 0x79e <M_PinMode+0x106>
 79a:	66 0f       	add	r22, r22
 79c:	77 1f       	adc	r23, r23
 79e:	8a 95       	dec	r24
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <M_PinMode+0x102>
 7a2:	cb 01       	movw	r24, r22
 7a4:	84 2b       	or	r24, r20
 7a6:	84 bb       	out	0x14, r24	; 20
			break;
 7a8:	08 95       	ret
			case GROUP_D:
			SET_BIT(DDRD,pin);
 7aa:	41 b3       	in	r20, 0x11	; 17
 7ac:	21 e0       	ldi	r18, 0x01	; 1
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	b9 01       	movw	r22, r18
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <M_PinMode+0x120>
 7b4:	66 0f       	add	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	8a 95       	dec	r24
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <M_PinMode+0x11c>
 7bc:	cb 01       	movw	r24, r22
 7be:	84 2b       	or	r24, r20
 7c0:	81 bb       	out	0x11, r24	; 17
 7c2:	08 95       	ret

000007c4 <M_PinWrite>:
	}  
}

void M_PinWrite(u8 x,u8 state)
{
	u8 port = x / 10;
 7c4:	9d ec       	ldi	r25, 0xCD	; 205
 7c6:	89 9f       	mul	r24, r25
 7c8:	91 2d       	mov	r25, r1
 7ca:	11 24       	eor	r1, r1
 7cc:	96 95       	lsr	r25
 7ce:	96 95       	lsr	r25
 7d0:	96 95       	lsr	r25
	u8 pin  = x % 10;
 7d2:	39 2f       	mov	r19, r25
 7d4:	33 0f       	add	r19, r19
 7d6:	23 2f       	mov	r18, r19
 7d8:	22 0f       	add	r18, r18
 7da:	22 0f       	add	r18, r18
 7dc:	23 0f       	add	r18, r19
 7de:	82 1b       	sub	r24, r18
	switch(state)
 7e0:	66 23       	and	r22, r22
 7e2:	21 f0       	breq	.+8      	; 0x7ec <M_PinWrite+0x28>
 7e4:	61 30       	cpi	r22, 0x01	; 1
 7e6:	09 f4       	brne	.+2      	; 0x7ea <M_PinWrite+0x26>
 7e8:	44 c0       	rjmp	.+136    	; 0x872 <__stack+0x13>
 7ea:	08 95       	ret
	{
		case LOW:
		switch(port)
 7ec:	92 30       	cpi	r25, 0x02	; 2
 7ee:	b9 f0       	breq	.+46     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f0:	18 f4       	brcc	.+6      	; 0x7f8 <M_PinWrite+0x34>
 7f2:	91 30       	cpi	r25, 0x01	; 1
 7f4:	31 f0       	breq	.+12     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f6:	08 95       	ret
 7f8:	93 30       	cpi	r25, 0x03	; 3
 7fa:	f9 f0       	breq	.+62     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 7fc:	94 30       	cpi	r25, 0x04	; 4
 7fe:	59 f1       	breq	.+86     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 800:	08 95       	ret
		{
			case GROUP_A:
			CLR_BIT(PORTA,pin);
 802:	4b b3       	in	r20, 0x1b	; 27
 804:	21 e0       	ldi	r18, 0x01	; 1
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	b9 01       	movw	r22, r18
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	66 0f       	add	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	8a 95       	dec	r24
 812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 814:	cb 01       	movw	r24, r22
 816:	80 95       	com	r24
 818:	84 23       	and	r24, r20
 81a:	8b bb       	out	0x1b, r24	; 27
			break;
 81c:	08 95       	ret
			case GROUP_B:
			CLR_BIT(PORTB,pin);
 81e:	48 b3       	in	r20, 0x18	; 24
 820:	21 e0       	ldi	r18, 0x01	; 1
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	b9 01       	movw	r22, r18
 826:	02 c0       	rjmp	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 828:	66 0f       	add	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	8a 95       	dec	r24
 82e:	e2 f7       	brpl	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 830:	cb 01       	movw	r24, r22
 832:	80 95       	com	r24
 834:	84 23       	and	r24, r20
 836:	88 bb       	out	0x18, r24	; 24
			break;
 838:	08 95       	ret
			case GROUP_C:
			CLR_BIT(PORTC,pin);
 83a:	45 b3       	in	r20, 0x15	; 21
 83c:	21 e0       	ldi	r18, 0x01	; 1
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	b9 01       	movw	r22, r18
 842:	02 c0       	rjmp	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 844:	66 0f       	add	r22, r22
 846:	77 1f       	adc	r23, r23
 848:	8a 95       	dec	r24
 84a:	e2 f7       	brpl	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 84c:	cb 01       	movw	r24, r22
 84e:	80 95       	com	r24
 850:	84 23       	and	r24, r20
 852:	85 bb       	out	0x15, r24	; 21
			break;
 854:	08 95       	ret
			case GROUP_D:
			CLR_BIT(PORTD,pin);
 856:	42 b3       	in	r20, 0x12	; 18
 858:	21 e0       	ldi	r18, 0x01	; 1
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	b9 01       	movw	r22, r18
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	66 0f       	add	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	8a 95       	dec	r24
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	cb 01       	movw	r24, r22
 86a:	80 95       	com	r24
 86c:	84 23       	and	r24, r20
 86e:	82 bb       	out	0x12, r24	; 18
			break;
 870:	08 95       	ret
			default:
			break;
		}
		break;
		case HIGH:
		switch(port)
 872:	92 30       	cpi	r25, 0x02	; 2
 874:	b1 f0       	breq	.+44     	; 0x8a2 <__stack+0x43>
 876:	18 f4       	brcc	.+6      	; 0x87e <__stack+0x1f>
 878:	91 30       	cpi	r25, 0x01	; 1
 87a:	31 f0       	breq	.+12     	; 0x888 <__stack+0x29>
 87c:	08 95       	ret
 87e:	93 30       	cpi	r25, 0x03	; 3
 880:	e9 f0       	breq	.+58     	; 0x8bc <__stack+0x5d>
 882:	94 30       	cpi	r25, 0x04	; 4
 884:	41 f1       	breq	.+80     	; 0x8d6 <__stack+0x77>
 886:	08 95       	ret
		{
			case GROUP_A:
			SET_BIT(PORTA,pin);
 888:	4b b3       	in	r20, 0x1b	; 27
 88a:	21 e0       	ldi	r18, 0x01	; 1
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	b9 01       	movw	r22, r18
 890:	02 c0       	rjmp	.+4      	; 0x896 <__stack+0x37>
 892:	66 0f       	add	r22, r22
 894:	77 1f       	adc	r23, r23
 896:	8a 95       	dec	r24
 898:	e2 f7       	brpl	.-8      	; 0x892 <__stack+0x33>
 89a:	cb 01       	movw	r24, r22
 89c:	84 2b       	or	r24, r20
 89e:	8b bb       	out	0x1b, r24	; 27
			break;
 8a0:	08 95       	ret
			case GROUP_B:
			SET_BIT(PORTB,pin);
 8a2:	48 b3       	in	r20, 0x18	; 24
 8a4:	21 e0       	ldi	r18, 0x01	; 1
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	b9 01       	movw	r22, r18
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__stack+0x51>
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	8a 95       	dec	r24
 8b2:	e2 f7       	brpl	.-8      	; 0x8ac <__stack+0x4d>
 8b4:	cb 01       	movw	r24, r22
 8b6:	84 2b       	or	r24, r20
 8b8:	88 bb       	out	0x18, r24	; 24
			break;
 8ba:	08 95       	ret
			case GROUP_C:
			SET_BIT(PORTC,pin);
 8bc:	45 b3       	in	r20, 0x15	; 21
 8be:	21 e0       	ldi	r18, 0x01	; 1
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	b9 01       	movw	r22, r18
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__stack+0x6b>
 8c6:	66 0f       	add	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	8a 95       	dec	r24
 8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <__stack+0x67>
 8ce:	cb 01       	movw	r24, r22
 8d0:	84 2b       	or	r24, r20
 8d2:	85 bb       	out	0x15, r24	; 21
			break;
 8d4:	08 95       	ret
			case GROUP_D:
			SET_BIT(PORTD,pin);
 8d6:	42 b3       	in	r20, 0x12	; 18
 8d8:	21 e0       	ldi	r18, 0x01	; 1
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	b9 01       	movw	r22, r18
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__stack+0x85>
 8e0:	66 0f       	add	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	8a 95       	dec	r24
 8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <__stack+0x81>
 8e8:	cb 01       	movw	r24, r22
 8ea:	84 2b       	or	r24, r20
 8ec:	82 bb       	out	0x12, r24	; 18
 8ee:	08 95       	ret

000008f0 <M_PinTog>:
	}	
}
void M_PinTog(u8 x)
{
	u8 port = x / 10;    
	u8 pin  = x % 10;    
 8f0:	9d ec       	ldi	r25, 0xCD	; 205
 8f2:	89 9f       	mul	r24, r25
 8f4:	91 2d       	mov	r25, r1
 8f6:	11 24       	eor	r1, r1
 8f8:	29 2f       	mov	r18, r25
 8fa:	26 95       	lsr	r18
 8fc:	26 95       	lsr	r18
 8fe:	26 95       	lsr	r18
 900:	22 0f       	add	r18, r18
 902:	32 2f       	mov	r19, r18
 904:	33 0f       	add	r19, r19
 906:	33 0f       	add	r19, r19
 908:	23 0f       	add	r18, r19
 90a:	82 1b       	sub	r24, r18
 90c:	28 2f       	mov	r18, r24
	switch(port)
 90e:	89 2f       	mov	r24, r25
 910:	86 95       	lsr	r24
 912:	86 95       	lsr	r24
 914:	86 95       	lsr	r24
 916:	82 30       	cpi	r24, 0x02	; 2
 918:	a1 f0       	breq	.+40     	; 0x942 <M_PinTog+0x52>
 91a:	18 f4       	brcc	.+6      	; 0x922 <M_PinTog+0x32>
 91c:	81 30       	cpi	r24, 0x01	; 1
 91e:	31 f0       	breq	.+12     	; 0x92c <M_PinTog+0x3c>
 920:	08 95       	ret
 922:	83 30       	cpi	r24, 0x03	; 3
 924:	c9 f0       	breq	.+50     	; 0x958 <M_PinTog+0x68>
 926:	84 30       	cpi	r24, 0x04	; 4
 928:	11 f1       	breq	.+68     	; 0x96e <M_PinTog+0x7e>
 92a:	08 95       	ret
	{
		case GROUP_A:
		TOG_BIT(PORTA,pin);
 92c:	3b b3       	in	r19, 0x1b	; 27
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	02 c0       	rjmp	.+4      	; 0x938 <M_PinTog+0x48>
 934:	88 0f       	add	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	2a 95       	dec	r18
 93a:	e2 f7       	brpl	.-8      	; 0x934 <M_PinTog+0x44>
 93c:	83 27       	eor	r24, r19
 93e:	8b bb       	out	0x1b, r24	; 27
		break;
 940:	08 95       	ret
		case GROUP_B:
		TOG_BIT(PORTB,pin);
 942:	38 b3       	in	r19, 0x18	; 24
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	02 c0       	rjmp	.+4      	; 0x94e <M_PinTog+0x5e>
 94a:	88 0f       	add	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	2a 95       	dec	r18
 950:	e2 f7       	brpl	.-8      	; 0x94a <M_PinTog+0x5a>
 952:	83 27       	eor	r24, r19
 954:	88 bb       	out	0x18, r24	; 24
		break;
 956:	08 95       	ret
		case GROUP_C:
		TOG_BIT(PORTC,pin);
 958:	35 b3       	in	r19, 0x15	; 21
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	02 c0       	rjmp	.+4      	; 0x964 <M_PinTog+0x74>
 960:	88 0f       	add	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	2a 95       	dec	r18
 966:	e2 f7       	brpl	.-8      	; 0x960 <M_PinTog+0x70>
 968:	83 27       	eor	r24, r19
 96a:	85 bb       	out	0x15, r24	; 21
		break;
 96c:	08 95       	ret
		case GROUP_D:
		TOG_BIT(PORTD,pin);
 96e:	32 b3       	in	r19, 0x12	; 18
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	02 c0       	rjmp	.+4      	; 0x97a <M_PinTog+0x8a>
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	2a 95       	dec	r18
 97c:	e2 f7       	brpl	.-8      	; 0x976 <M_PinTog+0x86>
 97e:	83 27       	eor	r24, r19
 980:	82 bb       	out	0x12, r24	; 18
 982:	08 95       	ret

00000984 <__vector_1>:
void M_EXT_INT_SetCallBack(void(*ptr)(void))
{
	call_back = ptr;
}
ISR(INT0_vect)
{
 984:	1f 92       	push	r1
 986:	0f 92       	push	r0
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	0f 92       	push	r0
 98c:	11 24       	eor	r1, r1
 98e:	2f 93       	push	r18
 990:	3f 93       	push	r19
 992:	4f 93       	push	r20
 994:	5f 93       	push	r21
 996:	6f 93       	push	r22
 998:	7f 93       	push	r23
 99a:	8f 93       	push	r24
 99c:	9f 93       	push	r25
 99e:	af 93       	push	r26
 9a0:	bf 93       	push	r27
 9a2:	ef 93       	push	r30
 9a4:	ff 93       	push	r31
	call_back(); 
 9a6:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <call_back>
 9aa:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <call_back+0x1>
 9ae:	09 95       	icall
 9b0:	ff 91       	pop	r31
 9b2:	ef 91       	pop	r30
 9b4:	bf 91       	pop	r27
 9b6:	af 91       	pop	r26
 9b8:	9f 91       	pop	r25
 9ba:	8f 91       	pop	r24
 9bc:	7f 91       	pop	r23
 9be:	6f 91       	pop	r22
 9c0:	5f 91       	pop	r21
 9c2:	4f 91       	pop	r20
 9c4:	3f 91       	pop	r19
 9c6:	2f 91       	pop	r18
 9c8:	0f 90       	pop	r0
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	0f 90       	pop	r0
 9ce:	1f 90       	pop	r1
 9d0:	18 95       	reti

000009d2 <__vector_10>:
		TCNT0                    = 256 - u8_global_rem_ticks;
	}
}
#elif TIMER_0_MODE        ==    CTC_MODE
ISR(TIMER0_COMP_vect)
{
 9d2:	1f 92       	push	r1
 9d4:	0f 92       	push	r0
 9d6:	0f b6       	in	r0, 0x3f	; 63
 9d8:	0f 92       	push	r0
 9da:	11 24       	eor	r1, r1
 9dc:	2f 93       	push	r18
 9de:	3f 93       	push	r19
 9e0:	4f 93       	push	r20
 9e2:	5f 93       	push	r21
 9e4:	6f 93       	push	r22
 9e6:	7f 93       	push	r23
 9e8:	8f 93       	push	r24
 9ea:	9f 93       	push	r25
 9ec:	af 93       	push	r26
 9ee:	bf 93       	push	r27
 9f0:	ef 93       	push	r30
 9f2:	ff 93       	push	r31
	static u32 u32_static_local_counter = 0;
	u32_static_local_counter++;
 9f4:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 9f8:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <__data_end+0x1>
 9fc:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <__data_end+0x2>
 a00:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <__data_end+0x3>
 a04:	01 96       	adiw	r24, 0x01	; 1
 a06:	a1 1d       	adc	r26, r1
 a08:	b1 1d       	adc	r27, r1
 a0a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 a0e:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__data_end+0x1>
 a12:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <__data_end+0x2>
 a16:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <__data_end+0x3>
	if(u32_static_local_counter == u32_global_no_of_cm)
 a1a:	40 91 90 00 	lds	r20, 0x0090	; 0x800090 <u32_global_no_of_cm>
 a1e:	50 91 91 00 	lds	r21, 0x0091	; 0x800091 <u32_global_no_of_cm+0x1>
 a22:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <u32_global_no_of_cm+0x2>
 a26:	70 91 93 00 	lds	r23, 0x0093	; 0x800093 <u32_global_no_of_cm+0x3>
 a2a:	84 17       	cp	r24, r20
 a2c:	95 07       	cpc	r25, r21
 a2e:	a6 07       	cpc	r26, r22
 a30:	b7 07       	cpc	r27, r23
 a32:	69 f4       	brne	.+26     	; 0xa4e <__vector_10+0x7c>
	{
		call_back();
 a34:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <call_back>
 a38:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <call_back+0x1>
 a3c:	09 95       	icall
		u32_static_local_counter = 0;
 a3e:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
 a42:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__data_end+0x1>
 a46:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <__data_end+0x2>
 a4a:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <__data_end+0x3>
	}	
}
 a4e:	ff 91       	pop	r31
 a50:	ef 91       	pop	r30
 a52:	bf 91       	pop	r27
 a54:	af 91       	pop	r26
 a56:	9f 91       	pop	r25
 a58:	8f 91       	pop	r24
 a5a:	7f 91       	pop	r23
 a5c:	6f 91       	pop	r22
 a5e:	5f 91       	pop	r21
 a60:	4f 91       	pop	r20
 a62:	3f 91       	pop	r19
 a64:	2f 91       	pop	r18
 a66:	0f 90       	pop	r0
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	0f 90       	pop	r0
 a6c:	1f 90       	pop	r1
 a6e:	18 95       	reti

00000a70 <M_UartInit>:
}
void M_UartSend(u8 u8_local_data)
{
	UDR = u8_local_data;
	while(GET_BIT(UCSRA,6) == 0);
}
 a70:	88 98       	cbi	0x11, 0	; 17
 a72:	89 9a       	sbi	0x11, 1	; 17
 a74:	52 98       	cbi	0x0a, 2	; 10
 a76:	87 e6       	ldi	r24, 0x67	; 103
 a78:	89 b9       	out	0x09, r24	; 9
 a7a:	86 ea       	ldi	r24, 0xA6	; 166
 a7c:	80 bd       	out	0x20, r24	; 32
 a7e:	54 9a       	sbi	0x0a, 4	; 10
 a80:	53 9a       	sbi	0x0a, 3	; 10
 a82:	08 95       	ret

00000a84 <M_UartRec>:
u8   M_UartRec(void)
{
	while(GET_BIT(UCSRA,7) == 0);
 a84:	5f 9b       	sbis	0x0b, 7	; 11
 a86:	fe cf       	rjmp	.-4      	; 0xa84 <M_UartRec>
	return UDR;
 a88:	8c b1       	in	r24, 0x0c	; 12
 a8a:	08 95       	ret

00000a8c <__tablejump2__>:
 a8c:	ee 0f       	add	r30, r30
 a8e:	ff 1f       	adc	r31, r31
 a90:	05 90       	lpm	r0, Z+
 a92:	f4 91       	lpm	r31, Z
 a94:	e0 2d       	mov	r30, r0
 a96:	09 94       	ijmp

00000a98 <_exit>:
 a98:	f8 94       	cli

00000a9a <__stop_program>:
 a9a:	ff cf       	rjmp	.-2      	; 0xa9a <__stop_program>
